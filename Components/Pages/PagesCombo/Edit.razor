@page "/Combos/Edit";
@inject ComboServices combosServices;
@inject ArticulosServices articulosServices
@inject NavigationManager navigationManager

<PageTitle>Edit de Combos</PageTitle>

<EditForm Model="Combos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><i class="fas fa-clipboard-list"></i> Editar Combos</h3>
        </div>
    </div>

    <div class="card-body">
        @* CombosId *@
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="ComboId" class="form-label">ComboId:</label>
                <div class="input-group">
                    <div style="width: 40%; height: 1em;">
                        <InputNumber @bind-Value="Combos.ComboId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" disabled />
                        <ValidationMessage For="@(() => Combos.ComboId)" />
                    </div>
                </div>
            </div>
        </div>

        @* Fecha *@
        <div class="mb-3">
            <label for="Fecha" class="form-label">Fecha:</label>
            <InputDate @bind-Value="Combos.Fecha" class="form-control" />
            <ValidationMessage For="@(() => Combos.Fecha)" />
        </div>

        @* Descripcion *@
        <div class="mb-3">
            <label for="Descripcion" class="form-label">Descripcion:</label>
            <InputText @bind-Value="Combos.Descripcion" class="form-control" />
            <ValidationMessage For="@(() => Combos.Descripcion)" />
        </div>

        @* Precio *@
        <div class="mb-3">
            <label for="Precio" class="form-label">Precio:</label>
            <InputNumber @bind-Value="Combos.Precio" class="form-control" />
            <ValidationMessage For="@(() => Combos.Precio)" />
        </div>

        @* Vendido *@
        <div class="mb-3">
            <label for="vendido" class="form-label">Vendido:</label>
            <InputCheckbox class="form-check-input" @bind-Value="Combos.Vendido" />
            <ValidationMessage For="@(() => Combos.Vendido)" />
        </div>

        @* Seleccionar Articulo *@
        <div class="card border-success mb-4">
            <div class="card-header">
                <h5 class="mb-0">Detalles de artículos a utilizar</h5>
            </div>
            <div style="display: flex; align-items: center;">
                <div class="col-3 text-center">
                    <InputSelect @bind-Value="selectedArticuloId" class="form-select">
                        <option value="0">--Seleccione un artículo--</option>
                        @foreach (var articulo in ListaArticulos)
                        {
                            <option value="@articulo.ArticuloId">@articulo.ArticuloId - @articulo.Descripcion -Existencia-@articulo.Existencia</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => selectedArticuloId)" />
                </div>

                @* Seleccionar Cantidad *@
                <div class="col-sm-3 p-0">
                    <div class="input-group">
                        <span class="input-group-text">Cantidad:</span>
                        <InputNumber @bind-Value="CombosDetalles.Cantidad" class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => CombosDetalles.Cantidad)" />
                </div>

                @* Costo *@
                <div class="col-sm-3 p-0">
                    <div class="input-group">
                        <span class="input-group-text">Costo:</span>
                        <InputNumber @bind-Value="CombosDetalles.Costo" class="form-control" Disabled />
                    </div>
                    <ValidationMessage For="@(() => CombosDetalles.Costo)" />
                </div>

                @* Botón agregar *@
                <div class="col-sm-2 p-0">
                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">
                        <span class="bi bi-plus"></span> Agregar
                    </button>
                </div>
            </div>

            @* Tabla de combos detalles *@
            <div class="table-responsive mt-3">
                <table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Cantidad</th>
                            <th>Costo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in ListaDetalle)
                        {
                            <tr>
                                <td>@detalle.DetalleId</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Costo</td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => EliminarDetalle(detalle)">
                                        <span class="bi bi-trash"></span> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                @* Botón Nuevo *@
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                @* Botón Guardar *@
                <button type="submit" class="btn btn-outline-success ml-2">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>
                @* Botón Retroceder *@
                <a type="button" href="/Combos/Index/" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ComboId { get; set; }
    public Combos Combos { get; set; } = new Combos();
    public CombosDetalle CombosDetalles { get; set; } = new CombosDetalle();
    public Articulos articulos { get; set; } = new Articulos();
    private bool Existe = false;
    private string ErrorMessage { get; set; } = string.Empty;
    public List<Combos> ListaCombos { get; set; } = new List<Combos>();
    public List<CombosDetalle> ListaDetalle { get; set; } = new List<CombosDetalle>();
    public List<Articulos> ListaArticulos { get; set; } = new List<Articulos>();
    public int selectedArticuloId { get; set; }
    int? montoArticulos;

    protected override async Task OnInitializedAsync()
    {
        ListaArticulos = await articulosServices.ListarArticulos();
        ListaDetalle = await combosServices.ObtenerDetalle();
    }

    public Task AgregarDetalle()
    {
        ErrorMessage = string.Empty;

        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == selectedArticuloId);

        if (articuloSeleccionado == null || CombosDetalles.Cantidad <= 0)
        {
            ErrorMessage = "Seleccione un artículo y una cantidad válida.";
            return Task.CompletedTask;
        }

        if (articuloSeleccionado.Existencia < CombosDetalles.Cantidad)
        {
            ErrorMessage = "No hay suficiente existencia del artículo para completar la operación.";
            return Task.CompletedTask;
        }

        articuloSeleccionado.Existencia -= CombosDetalles.Cantidad;

        CombosDetalles.Costo = (decimal)articuloSeleccionado.Precio;

        var nuevoDetalle = new CombosDetalle
            {
                ArticuloId = articuloSeleccionado.ArticuloId,
                DetalleId = ComboId,
                Cantidad = CombosDetalles.Cantidad,
                Costo = (decimal)articuloSeleccionado.Precio,
            };

        ListaDetalle.Add(nuevoDetalle);

        CombosDetalles = new CombosDetalle();
        selectedArticuloId = 0;

        CalcularMontoTotal();

        return Task.CompletedTask;
    }

    private async Task CalcularMontoTotal()
    {
        montoArticulos = (int?)ListaDetalle.Sum(d => (d.Costo * d.Cantidad));
    }

    public async Task EliminarDetalle(CombosDetalle detalle)
    {
        var articuloSeleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId);

        if (articuloSeleccionado != null)
        {
            articuloSeleccionado.Existencia += detalle.Cantidad;
        }
        ListaDetalle.Remove(detalle);
        selectedArticuloId = detalle.ArticuloId;
        await CalcularMontoTotal();
    }

    public async Task Guardar()
    {
        ErrorMessage = string.Empty;
        if (await combosServices.Guardar(Combos))
        {
            navigationManager.NavigateTo("/Combos/Index");
        }
        else
        {
            ErrorMessage = "No se pudo guardar el registro.";
        }
    }


    public void Nuevo()
    {
        Combos = new Combos();
        CombosDetalles = new CombosDetalle();
        Existe = false;
        ErrorMessage = string.Empty;
    }

    public async Task Buscar()
    {
        Existe = false;
        ErrorMessage = string.Empty;
        var comboEncontrado = await combosServices.Buscar(Combos.ComboId);

        if (comboEncontrado != null)
        {
            Combos = comboEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await combosServices.Existe(Combos.ComboId);


        if (Existe)
        {
            ErrorMessage = "Ya existe un combo con este ID";
        }
        else
        {
            Combos.Precio += (decimal)(montoArticulos ?? 0);
            montoArticulos = 0;
            ErrorMessage = string.Empty;
        }

        return !Existe;
    }


    public void Volver()
    {
        navigationManager.NavigateTo("/Combos/Index");
    }

}
